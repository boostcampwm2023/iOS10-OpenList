name: CI/CD Docker

on:
  pull_request:
    types: [closed]
    branches:
      - 'server/release/*'

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/nest-openlist-deploy
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - name: Check out source code
        uses: actions/checkout@v2
      # .env 파일 생성
      - name: Generate .env file
        run: |
          cat << EOF > ./server/.env
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          HASH_ROUNDS=${{ secrets.HASH_ROUNDS }}
          PROTOCOL=${{ secrets.PROTOCOL }}
          HOST=${{ secrets.HOST }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          SUB=${{ secrets.SUB }}
          ALG=${{ secrets.ALG }}
          KID=${{ secrets.KID }}
          ISS=${{ secrets.ISS }}
          AUTHKEY=${{ secrets.AUTHKEY }}
          X_NCP_CLOVASTUDIO_API_KEY=${{ secrets.X_NCP_CLOVASTUDIO_API_KEY }}
          X_NCP_APIGW_API_KEY=${{ secrets.X_NCP_APIGW_API_KEY }}
          X_NCP_CLOVASTUDIO_REQUEST_ID=${{ secrets.X_NCP_CLOVASTUDIO_REQUEST_ID }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          EOF
      # .p8 파일 생성
      - name: Generate .p8 file
        run: |
          cat << EOF > ./server/.p8
          ${{ secrets.P8 }}
          EOF
      # docker build 수행  
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }} # runner 설정에서 읽음.
          restore-keys: |
            ${{ runner.os }}-buildx-
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시    
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./server   # Docker 빌드 컨텍스트를 'server' 디렉토리로 설정
          file: ./server/Dockerfile   # 'server' 디렉토리 내의 Dockerfile 사용
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
    needs: build # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # ncloud ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 3000 -> 3000 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 3000:3000 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
